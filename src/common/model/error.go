package common_model

import "fmt"

type DescriptiveError struct {
	Message string `json:"message"`           // Short text describing the error as best as we can for humans.
	Content error  `json:"content,omitempty"` // Additional information about the error provided by the service that generated it. E. g. if an ORM returns an error, it will be propagated here as the raw error.
}

type ApiError struct {
	Context     string `json:"context"`               // Information about where the error occurred. E. g. the name of the package that returned the error.
	Description string `json:"description,omitempty"` // Description of the error generated by a.DescriptiveError.Error()
	DescriptiveError
}

func (a *ApiError) Send() ApiError {
	a.Description = a.DescriptiveError.Error()
	return *a
}

func NewDescriptiveError(message string, content error) *DescriptiveError {
	return &DescriptiveError{
		Message: message,
		Content: content,
	}
}

func NewApiError(message string, content error, context string) *ApiError {
	d := *NewDescriptiveError(message, content)
	return &ApiError{
		DescriptiveError: d,
		Context:          context,
	}
}

func NewParseJsonError(err error) *ApiError {
	return NewApiError("unable to parse JSON into struct", err, "handler")
}

// Implement the Error method for DescriptiveError
func (e *DescriptiveError) Error() string {
	if e.Content == nil {
		return e.Message
	}
	return fmt.Sprintf("%s: %v", e.Message, e.Content)
}

// Implement the Error method for ApiError
func (e *ApiError) Error() string {
	return fmt.Sprintf("%s (context: %s)", e.DescriptiveError.Error(), e.Context)
}
